## APS

### 8. 트리
- 트리
- 이진 트리
- 이진 트리의 표현
- 이진 트리의 저장 
- 연습문제
- 이진탐색 트리
- 힙


: 전체적인 그림. 당일 세부 그림!!
: 완전 정석적인 개발 코드를 많이 보고 있었는데, 

이제는 코테의 코드를 보여주겠다. 

연결리스트, 함수 정의, 클래스

: 클래스는 개발에서는 많이 쓰이지만, 
코테에서는 많이 안쓰인다. 

: 28까지 자료구조. 

29부터 응용(시간복잡도, 증명, 응용알고리즘, 수식***)

? 트리가 왜 응용 파트에 들어와 있을까?!-> 응용파트로 가는 디딤돌

-트리의 개념
: 비선형구조
: 원소들 간에 1:n관계를 가지는 자료구조
: 원소들 간에 계층관계를 가지는 계층형 자료구조
: 상위 원소에서 하위 원소로 내려가면서 확장되는 트리(나무)모양의 구조


지금까지의 자료구조

선형: 스택, 큐, 덱, 연결리스트


비선형: 딕셔너리, set, 해쉬, 그래프
: 순서가 없어서, 키를 통해 접근하거나.
: 인덱스 사용이 제한 됨.

:그래프 중에 특수한 그래프가 트리!!

====================================


[트리 정의]

: 한개 이상의 노드로 이루어진 유한집합이며, 다음 조건을 만족한다.
- 노드 중 최상이 노드를 루트라고 한다.
- 나머지 노드들은 n(>=0)개의 분리 집합 T1,..., TN으로 분리될 수 있다. 
: 이들 T1, ..., TN은 각각 하나의 트리가 되며("재귀적 정의")루트의 부트리(subtree)라 한다. 
* 정점( node, vertex), 단말노드 또는 잎노드


[트리 용어]

- 노드: 트리의 원소
- 조상노드: 간선을 따라 루트 노드까지 이르는 경로에 있는 모든 노드들(K의 조상 노드: F, B, A)
- 서브 트리: 부모 노드와 연결된 간선을 끊었을때 생성되는 트리
- 자손 노드: 서브 트리에 있는 하위 레벨의 노드들
(B의 자손노드: E, F, K)

- 차수(degree)
: 노드의 차수: 노드에 연결된 자식 노드의 수
(B의 차수 = 2, C의 차수=1)
: 트리의 차수: 트리에 있는 노드의 차수 중에서 가장 큰 값
(트리 T의 차수= 3)
: 단말 노트(리프 노드) 차수가 0인 노드, 자식노드가 없는 노드.

- 높이
: 노드의 높이: 루트에서 노드에 이르는 간선의 수. 노드의 레벨
: 트리의 높이: 트리에 있는 노드의 높이 중에서 가장 큰 값. 최대 레벨
(트리T의 높이= 3)

[계층구조- 그래프와의 차이점]
트리는 싸이클이 없다. 즉, 형제노드끼리 연결을 할 수 없다.
많이 사용되는 트리는 뭐가 있을까?
많은 알고리즘들이 트리는 활용하여 사용됨
:  ex)이진트리.
    이진수, 0 1, 홀짝...

[이진트리]
- 모든 노드들이 2개의 서브트리를 갖는 특별한 형태의 트리
- 각 노드가 자식 노드를 ""최대한""2개 까지만 가질 수 있는 트리
- 레벨 i에서의 노드의 최대 갯수 2^i
- 높이가 h인 이진트리가 가질 수있는, 노드의 최소 갯수 h+1,
최대 갯수는 2^(h+1)-1개


이진트리-> 완전이진 -> 포화이진 의 단계로 발전.

[포화이진트리]
-높이가 3일때 15개의 노드
(높이는 0부터 시작하므로, 그림은 3이다.
 (숫자있는거)높이가.)


[완전이진트리]

[편향이진트리]
-왼쪽 편향


[2]

이진트리- 순회
: 순회란 트리의 각 노드를 중복되지 않게 전부 방문하는 것을
말하는데 트리는 비 선형 구조이기 대문에 선형구조에서와 같이 선후 연결 관계를 알 수 없다.
따라서 특별한 방법이 필요.

순회
: 3가지 기본적인 순회 방법

<나의 위치 가 어니냐에 따라, 전 중 후 가 붙는다>


전위 순회: 왼쪽 부터 간다. 
나를 먼저!
### 나 왼 오

중위 순회: 
나를 중간!
### 왼쪽, 나(중간), 오른쪽
:나의 왼쪽이 잇으면, 무족권 왼 나 오.

후위 순회:
: 자식부터 다 보자는 뜻.
나를 마지막!
### 왼 오 나


[배열을 이용한 이진트리의 표현]
: 루트의 번호를 1로 함.


[설명]
list 는 자료형
트리는 자료구조

자료구조는 왜 필요한가?
어디에 쓰는가?






